/*
Copyright (c) 2011, David Arno

Permission is hereby granted, free of charge, to any person obtaining a copy of 
this software and associated documentation files (the "Software"), to deal in 
the Software without restriction, including without limitation the rights to 
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies 
of the Software, and to permit persons to whom the Software is furnished to 
do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in 
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN 
THE SOFTWARE.
*/
package org.ghostfish.as3introspection.factory
{
	import org.ghostfish.as3introspection.abc.RepresentationHierarchy;

	/**
	 * Defines the contract that any representation formatter must fulfill.
	 * 
	 * <p>The representation formatter is used by an instance of ABCWalker to
	 * process a representation hierarchy generated by an instance of 
	 * IRepresentationFactory.</p>
	 * 
	 * <p>Implementations of this interface get to choose just what processing
	 * the representation hierarchy involves. It might be the generation of,
	 * for example, an XML strucure that expresses the "public" contents of a
	 * SWF, or it might be, for example, some sort of file system or 
	 * socket-based generation process.</p>
	 */
	public interface IRepresentationFormatter
	{
		/**
		 * Processes a representation hierarchy.
		 * 
		 * @param hierarchy	The hierarchy to be processed.
		 */
		function process(hierarchy:RepresentationHierarchy):void;
	}
}